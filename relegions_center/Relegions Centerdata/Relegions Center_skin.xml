<?xml version="1.0" encoding="UTF-8"?>
<krpano version="1.17">

    
  <!-- Spot Style - Load panorama -->
  <style name="IconLoadpanorama"
         url="%FIRSTXML%/spots/hotspot_neutral_sequence_user_defaultpoint5.png"
         visible="false"

         frame="0"
         lastframe="17"
         framewidth="40"
         frameheight="40"
         stopspotsequence="false"
         onloaded="setdefaultanimatedspotframe();startspotanimation(0.1);"

         onhover="onhoverIconLoadpanorama"
         onout="onoutIconLoadpanorama"
         />
  <action name="onhoverIconLoadpanorama">
    showtooltip(hotspot);
  </action>
  <action name="onoutIconLoadpanorama">
    hideTooltip();



  </action>

          <!-- unsupported kind of display : PointMap -->

<!-- ************ -->
<!-- Double click -->
<!-- ************ -->
  <plugin name="doubleclick" url="%FIRSTXML%/graphics/doubleclick/fieldofview_dc.swf" alturl="%FIRSTXML%/graphics/doubleclick/fieldofview_dc.js" keep="true" ondblclick="ondoubleclick();"/>
  <action name="ondoubleclick">switchFullscreen();

  </action>
<!-- ************ -->
<!-- Context Menu -->
<!-- ************ -->
  <contextmenu fullscreen="false">
    <item name="normal"        onclick="setViewNormal();" separator="true"/>
    <item name="architectural" onclick="setViewArchitectural();"/>
    <item name="littleplanet"  onclick="setViewLittlePlanet();"/>
    <item name="fullscreenentry" onclick="enterFullscreen();" separator="true"/>
  </contextmenu>

  <events name="contextmenuevents" keep="true" onenterfullscreen="updateContextMenu" onexitfullscreen="updateContextMenu" onxmlcomplete="updateContextMenu"/>
  <action name="updateContextMenu">
    getmessage(contextmenu.item[normal].caption, contextmenunormallabel);
    getmessage(contextmenu.item[architectural].caption, contextmenuarchitecturallabel);
    getmessage(contextmenu.item[littleplanet].caption, contextmenulittleplanetlabel);
    if(tour_fullscreen,
      getmessage(contextmenu.item[fullscreenentry].caption, contextmenucloseFsLabel);
      set(contextmenu.item[fullscreenentry].onclick, exitFullscreen(););
     ,
      getmessage(contextmenu.item[fullscreenentry].caption, contextmenuopenFsLabel);
      set(contextmenu.item[fullscreenentry].onclick, enterFullscreen(););
    );
  </action>
<!-- ********* -->
<!-- Gyroscope -->
<!-- ********* -->
<plugin name="gyroscope"
        url="graphics/gyro.js"
        keep="true"
        devices="tablet|mobile"
        onavailable="delayedcall(1, checkGyroAvailability(););"
        enabled="true"
        />

<action name="changeGyroscopeState">
  ifnot (plugin[gyroscope].available === undefined,
    if (plugin[gyroscope].available,
      switch(plugin[gyroscope].enabled);
      if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
    );
  );
</action>

<action name="checkGyroAvailability">
	ifnot (plugin[gyroscope].available === undefined, 
		if (plugin[gyroscope].available,
			set(tour_gyroscopedevices, true);
			events.dispatch(ongyroscopeavailable);
			if (plugin[gyroscope].enabled, events.dispatch(ongyroscopeon);, events.dispatch(ongyroscopeoff););
		,
			set(tour_gyroscopedevices, false);
			set(plugin[gyroscope].enabled, false);
		);
	,
		set(tour_gyroscopedevices, false);
		set(plugin[gyroscope].enabled, false);
	);
</action>
  <!-- ************ -->
  <!-- iControl Bar -->
  <!-- ************ -->


  <krpano theme11barbuilt="false" theme11backgroundwidthwhenclosed="0" theme11backgroundwidthwhenopened="0" theme11IsOpened="false" />
  <events name="theme11events" onxmlcomplete="theme11buildMenuBar();" keep="true"/>
  <action name="theme11buildMenuBar">
    ifnot (theme11barbuilt, theme11buildMenu(); set(theme11barbuilt, true););
  </action>

  <style name="theme11_btn_style"
         keep="true"
         edge="right"
         align="right"
         x="0" y="0"
         width="40" height="40"
         crop="0|0|60|60"
         onovercrop="0|60|60|60"
         ondowncrop="0|120|60|60"
         />

  <layer name="theme11_menu_bg"
         keep="true"
         type="container"
         zorder="3"
         width="40"
         height="40"
         align="bottomright"
         x="10" y="10"
         maskchildren="true"
         rotate="0"
         visible="false"
         >

    <layer name="theme11btn_gyroscope_off"
            url="%FIRSTXML%/graphics/icontrolbar/btn_gyroscope.png"
            style="theme11_btn_style"
            onclick="disableGyroscope();"
            devices="tablet|mobile"
            visible="false"
            />
    <layer name="theme11btn_gyroscope_on"
            url="%FIRSTXML%/graphics/icontrolbar/btn_gyroscope.png"
            style="theme11_btn_style"
            onclick="enableGyroscope();"
            devices="tablet|mobile"
            visible="false"
            />


    <layer name="theme11btn_ctrlmode_move_to"
            url="%FIRSTXML%/graphics/icontrolbar/btn_move_to.png"
            style="theme11_btn_style"
            onclick="setControlModeMoveTo();"
            visible="false"
            devices="desktop"
            />
    <layer name="theme11btn_ctrlmode_drag_to"
            url="%FIRSTXML%/graphics/icontrolbar/btn_drag_to.png"
            style="theme11_btn_style"
            onclick="setControlModeDragTo();"
            visible="false"
            devices="desktop"
            />

    <layer name="theme11btn_in"
            url="%FIRSTXML%/graphics/icontrolbar/btn_zoom_in.png"
            ondown="set(fov_moveforce, -1);"
            onup="set(fov_moveforce, 0);"
            style="theme11_btn_style"
            visible="false"
            devices="desktop"
            />
    <layer name="theme11btn_out"
            url="%FIRSTXML%/graphics/icontrolbar/btn_zoom_out.png"
            ondown="set(fov_moveforce, +1);"
            onup="set(fov_moveforce, 0);"
            style="theme11_btn_style"
            visible="false"
            devices="desktop"
            />

    <layer name="theme11btn_left"
            url="%FIRSTXML%/graphics/icontrolbar/btn_move_left.png"
            ondown="set(hlookat_moveforce, -1);"
            onup="set(hlookat_moveforce, 0);"
            style="theme11_btn_style"
            visible="false"
            devices="desktop"
            />
    <layer name="theme11btn_right"
            url="%FIRSTXML%/graphics/icontrolbar/btn_move_right.png"
            ondown="set(hlookat_moveforce, +1);"
            onup="set(hlookat_moveforce, 0);"
            style="theme11_btn_style"
            visible="false"
            devices="desktop"
            />

    <layer name="theme11btn_up"
            url="%FIRSTXML%/graphics/icontrolbar/btn_move_up.png"
            ondown="set(vlookat_moveforce, -1);"
            onup="set(vlookat_moveforce, 0);"
            style="theme11_btn_style"
            visible="false"
            devices="desktop"
            />
    <layer name="theme11btn_down"
            url="%FIRSTXML%/graphics/icontrolbar/btn_move_down.png"
            ondown="set(vlookat_moveforce, +1);"
            onup="set(vlookat_moveforce, 0);"
            style="theme11_btn_style"
            visible="false"
            devices="desktop"
            />



    <layer name="theme11btn_prev_pano"
            url="%FIRSTXML%/graphics/icontrolbar/btn_previous_scene.png"
            onclick="loadPreviousScene();"
            style="theme11_btn_style"
            visible="false"
            />
    <layer name="theme11btn_next_pano"
            url="%FIRSTXML%/graphics/icontrolbar/btn_next_scene.png"
            onclick="loadNextScene();"
            style="theme11_btn_style"
            visible="false"
            />

  <layer name="theme11btn_hide_thumbnails"
          url="%FIRSTXML%/graphics/icontrolbar/btn_hide_thumbnails.png"
          style="theme11_btn_style"
          onclick="hideTourThumbnails();"
          visible="false"
          />
  <layer name="theme11btn_show_thumbnails"
          url="%FIRSTXML%/graphics/icontrolbar/btn_show_thumbnails.png"
          style="theme11_btn_style"
          onclick="showTourThumbnails();"
          visible="false"
          />


    <layer name="theme11btn_display_map"
            url="%FIRSTXML%/graphics/icontrolbar/btn_map.png"
            onclick="theme11displayMap();"
            style="theme11_btn_style"
            visible="false"
            />
    <layer name="theme11btn_hide_map"
            url="%FIRSTXML%/graphics/icontrolbar/btn_map.png"
            onclick="theme11hideMap();"
            style="theme11_btn_style"
            visible="false"
            />


    <layer name="theme11btn_openfs"
            url="%FIRSTXML%/graphics/icontrolbar/btn_enter_fs.png"
            onclick="enterFullscreen();"
            style="theme11_btn_style"
            visible="false"
            devices="fullscreensupport"
            />
    <layer name="theme11btn_closefs"
            url="%FIRSTXML%/graphics/icontrolbar/btn_close_fs.png"
            onclick="exitFullscreen();"
            style="theme11_btn_style"
            visible="false"
            devices="fullscreensupport"
            />

    <layer name="theme11btn_autorotate_on"
            url="%FIRSTXML%/graphics/icontrolbar/btn_start_autorotation.png"
            onclick="startautorotation();"
            style="theme11_btn_style"
            visible="false"
            />
    <layer name="theme11btn_autorotate_off"
            url="%FIRSTXML%/graphics/icontrolbar/btn_stop_autorotation.png"
            onclick="stopautorotation();"
            style="theme11_btn_style"
            visible="false"
            />



    <layer name="theme11btn_display_help"
            url="%FIRSTXML%/graphics/icontrolbar/btn_help.png"
            onclick="theme11displayHelp();"
            style="theme11_btn_style"
            devices="desktop"
            visible="false"
            />
    <layer name="theme11btn_close_help"
            url="%FIRSTXML%/graphics/icontrolbar/btn_help.png"
            onclick="theme11closeHelp();"
            style="theme11_btn_style"
            visible="false"
            devices="desktop"
            />


    <layer name="theme11btn_display_info"
            url="%FIRSTXML%/graphics/icontrolbar/btn_info.png"
            onclick="showTourInfo();"
            style="theme11_btn_style"
            visible="false"
            />

    <layer name="theme11btn_close_info"
            url="%FIRSTXML%/graphics/icontrolbar/btn_info.png"
            onclick="hideTourInfo();"
            style="theme11_btn_style"
            visible="false"
            />


    <layer name="theme11btn_hidecontrols"
           url="%FIRSTXML%/graphics/icontrolbar/btn_hide_controls.png"
           style="theme11_btn_style"
           onclick="hideTourControls();"
           visible="false"
           />
    <layer name="theme11btn_showcontrols"
           url="%FIRSTXML%/graphics/icontrolbar/btn_show_controls.png"
           style="theme11_btn_style"
           onclick="showTourControls();"
           visible="false"
           />
 </layer>



  <events name="theme11gyroscopeavailableevent"
          ongyroscopeavailable="theme11updateGyroscopeButtonsAvailability();"
          ongyroscopeon="theme11enableGyroscopeButtons(true);"
          ongyroscopeoff="theme11enableGyroscopeButtons(false);"
          keep="true"/>
  <krpano theme11menugyroscopeavailable="false" theme11menugyroscopeenabled="false"/>
  <action name="theme11updateGyroscopeButtonsAvailability">
    if (tour_gyroscopedevices,
      set(theme11menugyroscopeavailable, true);
      theme11updateGyroscopeButtons();
    );
  </action>
  <action name="theme11enableGyroscopeButtons">
    if (tour_gyroscopedevices,
      set(theme11menugyroscopeenabled, %1);
      theme11updateGyroscopeButtons();
    );
  </action>
	<action name="theme11HideGyroscopeButtons">
		set(layer[theme11btn_gyroscope_off].visible, false);
		set(layer[theme11btn_gyroscope_on].visible, false);
	</action>
	<action name="theme11ShowGyroscopeButtons">
		if (theme11menugyroscopeavailable,
			if (theme11menugyroscopeenabled,
				set(layer[theme11btn_gyroscope_off].visible, false);
				set(layer[theme11btn_gyroscope_on].visible, true);
			,
				set(layer[theme11btn_gyroscope_off].visible, true);
				set(layer[theme11btn_gyroscope_on].visible, false);
			);
		,
			theme11HideGyroscopeButtons();
		);
	</action>
	<action name="theme11updateGyroscopeButtons">
	if (tour_gyroscopedevices,
		if (tour_displaycontrols,
			theme11ShowGyroscopeButtons();
		,
			theme11HideGyroscopeButtons();
		);
	,
		theme11HideGyroscopeButtons();
	);
	</action>


	<events name="theme11controlmodechangedevent" 
		oncontrolmodechanged="theme11updateControlModeButtons();" 
		keep="true" />
	<action name="theme11HideControlModeButtons">
		set(layer[theme11btn_ctrlmode_move_to].visible, false);
		set(layer[theme11btn_ctrlmode_drag_to].visible, false);
	</action>
	<action name="theme11ShowControlModeButtons">
		if (tour_controlmodemousetype == "moveto",
			set(layer[theme11btn_ctrlmode_drag_to].visible, true);
			set(layer[theme11btn_ctrlmode_move_to].visible, false);
		,
			set(layer[theme11btn_ctrlmode_move_to].visible, true);
			set(layer[theme11btn_ctrlmode_drag_to].visible, false);
		);
	</action>
	<action name="theme11updateControlModeButtons">
	if (device.desktop,
		if (tour_displaycontrols,
			theme11ShowControlModeButtons();
		,
			theme11HideControlModeButtons();
		);
	,
		theme11HideControlModeButtons();
	);
	</action>

	<events name="theme11hideshowthumbnailsevent" 
		hidetourthumbnails="theme11updateHideShowThumbnailsButtons();" 
		showtourthumbnails="theme11updateHideShowThumbnailsButtons();" 
		keep="true" />
	<action name="theme11HideHideShowThumbnailsButtons">
		set(layer[theme11btn_show_thumbnails].visible, false);
		set(layer[theme11btn_hide_thumbnails].visible, false);
	</action>
	<action name="theme11ShowHideShowThumbnailsButtons">
		if (tour_displaythumbnails,
			set(layer[theme11btn_hide_thumbnails].visible, true);
			set(layer[theme11btn_show_thumbnails].visible, false);
		,
			set(layer[theme11btn_show_thumbnails].visible, true);
			set(layer[theme11btn_hide_thumbnails].visible, false);
		);
	</action>
	<action name="theme11updateHideShowThumbnailsButtons">
		if (tour_displaycontrols,
			theme11ShowHideShowThumbnailsButtons();
		,
			theme11HideHideShowThumbnailsButtons();
		);
	</action>

	<events name="theme11hideshowcontrolsevent" 
		hidetourcontrols="theme11hideMenuControls();" 
		showtourcontrols="theme11showMenuControls();" 
		keep="true" />

  <action name="theme11hideMenuControls">
    set(theme11IsOpened, false);
    set(layer[theme11btn_hidecontrols].visible, false);
    set(layer[theme11btn_showcontrols].visible, true);
if (scene.count GT 1,
	set(layer[theme11btn_next_pano].visible, false);
	set(layer[theme11btn_prev_pano].visible, false);
);


if (device.desktop,
	set(layer[theme11btn_in].visible, false);
	set(layer[theme11btn_out].visible, false);
);
if (device.desktop,
	set(layer[theme11btn_up].visible, false);
	set(layer[theme11btn_down].visible, false);
);
if (device.desktop,
	set(layer[theme11btn_left].visible, false);
	set(layer[theme11btn_right].visible, false);
);
	theme11updateFullscreenButtons();
	theme11updateHelpButtons();

	theme11updateInfoButtons();

	theme11updateAutorotationButtons();

	theme11updateGyroscopeButtons();

	theme11updateControlModeButtons();

	theme11updateMapButtons();

	theme11updateHideShowThumbnailsButtons();

    set(layer[theme11_menu_bg].width , get(theme11backgroundwidthwhenclosed));
	set(layer[theme11_menu_bg].visible, true);
  </action>
  <action name="theme11showMenuControls">
    set(theme11IsOpened, true);
    set(layer[theme11btn_hidecontrols].visible, true);
    set(layer[theme11btn_showcontrols].visible, false);
	set(layer[theme11_menu_bg].visible, true);
if (scene.count GT 1,
	set(layer[theme11btn_next_pano].visible, true);
	set(layer[theme11btn_prev_pano].visible, true);
);


if (device.desktop,
	set(layer[theme11btn_in].visible, true);
	set(layer[theme11btn_out].visible, true);
);
if (device.desktop,
	set(layer[theme11btn_up].visible, true);
	set(layer[theme11btn_down].visible, true);
);
if (device.desktop,
	set(layer[theme11btn_left].visible, true);
	set(layer[theme11btn_right].visible, true);
);
	theme11updateFullscreenButtons();
	theme11updateHelpButtons();

	theme11updateInfoButtons();

	theme11updateAutorotationButtons();

	theme11updateGyroscopeButtons();

	theme11updateControlModeButtons();

	theme11updateMapButtons();

	theme11updateHideShowThumbnailsButtons();

    set(layer[theme11_menu_bg].width, get(theme11backgroundwidthwhenopened));
  </action>


  <layer name="theme11helpScreenBg"
         align="center"
         keep="true"
         onclick="theme11closeHelp();"
         url="%FIRSTXML%/graphics/icontrolbar/help_screen_bg.png"
         visible="false"
         rotate="-90"
         height="50%"
         width="prop"
         zorder="97"
         x="100%"
         displayed="false" />
  <layer name="theme11helpScreenFg"
         align="center"
         keep="true"
         onclick="theme11closeHelp();"
         url="%FIRSTXML%/graphics/icontrolbar/help_screen_fg.png"
         height="50%"
         width="prop"
         visible="false"
         rotate="90"
         zorder="98"
         x="-100%" />
  <action name="theme11displayHelp">
  if (device.desktop,
    set(layer[theme11helpScreenBg].displayed,true);
    set(layer[theme11helpScreenBg].visible,true);
    set(layer[theme11helpScreenFg].visible,true);
    tween(layer[theme11helpScreenFg].rotate,0, 1);
    tween(layer[theme11helpScreenBg].rotate,0, 1);
    tween(layer[theme11helpScreenFg].x,0, 1);
    tween(layer[theme11helpScreenBg].x,0, 1);
    theme11updateHelpButtons();
  );
  </action>
  <action name="theme11closeHelp">
  if (device.desktop,
    set(layer[theme11helpScreenBg].displayed,false);
    tween(layer[theme11helpScreenFg].rotate,  90, 1, easeOutQuad, set(layer[helpScreenFg].visible,false););
    tween(layer[theme11helpScreenBg].rotate, -90, 1, easeOutQuad, set(layer[helpScreenBg].visible,false););
    tween(layer[theme11helpScreenFg].x, -100%, 1);
    tween(layer[theme11helpScreenBg].x, 100%, 1);
    theme11updateHelpButtons();
  );
  </action>
	<action name="theme11HideHelpButtons">
		set(layer[theme11btn_display_help].visible, false);
		set(layer[theme11btn_close_help].visible, false);
	</action>
	<action name="theme11ShowHelpButtons">
		if (layer[theme11helpScreenBg].displayed,
			set(layer[theme11btn_close_help].visible, true);
			set(layer[theme11btn_display_help].visible, false);
		,
			set(layer[theme11btn_display_help].visible, true);
			set(layer[theme11btn_close_help].visible, false);
		);
	</action>
	<action name="theme11updateHelpButtons">
	if (device.desktop,
		if (tour_displaycontrols,
			theme11ShowHelpButtons();
		,
			theme11HideHelpButtons();
		);
	,
		theme11HideHelpButtons();
	);
	</action>


	<events name="theme11hideshowinfoevent" 
		onhidetourinfo="theme11updateInfoButtons();" 
		onshowtourinfo="theme11updateInfoButtons();" 
		keep="true" />
	<action name="theme11HideInfoButtons">
		set(layer[theme11btn_display_info].visible, false);
		set(layer[theme11btn_close_info].visible, false);
	</action>
	<action name="theme11ShowInfoButtons">
		if (tour_displayinfo,
			set(layer[theme11btn_close_info].visible, true);
			set(layer[theme11btn_display_info].visible, false);
		,
			set(layer[theme11btn_display_info].visible, true);
			set(layer[theme11btn_close_info].visible, false);
		);
	</action>
	<action name="theme11updateInfoButtons">
		if (tour_displaycontrols,
			theme11ShowInfoButtons();
		,
			theme11HideInfoButtons();
		);
	</action>

  <action name="theme11displayMap">showMap();
  </action>
  <action name="theme11hideMap">hideMap();
  </action>
  
  <events name="theme11displaymapchangeevent"
          onshowtourmap="theme11updateMapButtons();"
          onhidetourmap="theme11updateMapButtons();"
          keep="true"/>
	<action name="theme11HideMapButtons">
		set(layer[theme11btn_display_map].visible, false);
		set(layer[theme11btn_hide_map].visible, false);
	</action>
	<action name="theme11ShowMapButtons">
		if (tour_displaymap,
			set(layer[theme11btn_hide_map].visible, true);
			set(layer[theme11btn_display_map].visible, false);
		,
			set(layer[theme11btn_display_map].visible, true);
			set(layer[theme11btn_hide_map].visible, false);
		);
	</action>
	<action name="theme11updateMapButtons">
		if (tour_displaycontrols,
			theme11ShowMapButtons();
		,
			theme11HideMapButtons();
		);
	</action>



  <events name="theme11menufullscreenchangeevent"
          onenterfullscreen="theme11updateFullscreenButtons();"
          onexitfullscreen="theme11updateFullscreenButtons();"
          keep="true"/>
	<action name="theme11HideFullscreenButtons">
		set(layer[theme11btn_openfs].visible , false);
		set(layer[theme11btn_closefs].visible, false);
	</action>
	<action name="theme11ShowFullscreenButtons">
		if (device.fullscreensupport,
			if(tour_fullscreen,
				set(layer[theme11btn_openfs].visible , false);
				set(layer[theme11btn_closefs].visible, true);
			,
				set(layer[theme11btn_openfs].visible ,true);
				set(layer[theme11btn_closefs].visible,false);
			);
		,
			theme11HideFullscreenButtons();
		);
	</action>
	<action name="theme11updateFullscreenButtons">
		if (tour_displaycontrols,
			theme11ShowFullscreenButtons();
		,
			theme11HideFullscreenButtons();
		);
	</action>

	<events name="theme11AutorotationEvents"
		onstartautorotation="theme11updateAutorotationButtons();"
		onresumeautorotation="theme11updateAutorotationButtons();"
		onstopautorotation="theme11updateAutorotationButtons();"
		onpauseautorotation="theme11updateAutorotationButtons();"
		keep="true"/>
	<action name="theme11HideAutorotationButtons">
		set(layer[theme11btn_autorotate_off].visible, false);
		set(layer[theme11btn_autorotate_on].visible , false);
	</action>
	<action name="theme11ShowAutorotationButtons">
		if(tour_autorotateenabled==false,
			set(layer[theme11btn_autorotate_off].visible, false);
			set(layer[theme11btn_autorotate_on].visible , true);
		,
			set(layer[theme11btn_autorotate_off].visible, true);
			set(layer[theme11btn_autorotate_on].visible , false);
		);
	</action>
	<action name="theme11updateAutorotationButtons">
		if (tour_displaycontrols,
			theme11ShowAutorotationButtons();
		,
			theme11HideAutorotationButtons();
		);
	</action>



  <action name="theme11buildMenu">
    
    set(theme11button_pos, 0);

	set(theme11backgroundwidthwhenclosed, 40);
    set(layer[theme11btn_hidecontrols].x, get(theme11button_pos));
    set(layer[theme11btn_showcontrols].x, get(theme11button_pos));
    inc(theme11button_pos, 45);


    set(layer[theme11btn_display_info].x, get(theme11button_pos));
    set(layer[theme11btn_close_info].x  , get(theme11button_pos));
    inc(theme11button_pos, 45);


      if (device.desktop,
        set(layer[theme11btn_display_help].x, get(theme11button_pos));
        set(layer[theme11btn_close_help].x  , get(theme11button_pos));
        inc(theme11button_pos, 45);
      );

      if (device.fullscreensupport,
        set(layer[theme11btn_openfs].x , get(theme11button_pos));
        set(layer[theme11btn_closefs].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
      );


      set(layer[theme11btn_display_map].x , get(theme11button_pos));
      set(layer[theme11btn_hide_map].x    , get(theme11button_pos));
      inc(theme11button_pos, 45);


      set(layer[theme11btn_autorotate_on].x , get(theme11button_pos));
      set(layer[theme11btn_autorotate_off].x, get(theme11button_pos));
      inc(theme11button_pos, 45);



      set(layer[theme11btn_show_thumbnails].x, get(theme11button_pos));
      set(layer[theme11btn_hide_thumbnails].x, get(theme11button_pos));
      inc(theme11button_pos, 45);

    if (device.desktop,
      set(layer[theme11btn_ctrlmode_drag_to].x, get(theme11button_pos));
      set(layer[theme11btn_ctrlmode_move_to].x, get(theme11button_pos));
      inc(theme11button_pos, 45);
    );


      set(theme11DisplayGryoscopeButton, false);
      if (device.tablet, set(theme11DisplayGryoscopeButton, true););
      if (device.mobile, set(theme11DisplayGryoscopeButton, true););
      if(theme11DisplayGryoscopeButton,
        set(layer[theme11btn_gyroscope_on].x , get(theme11button_pos));
        set(layer[theme11btn_gyroscope_off].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
      );


      if (device.desktop,
        set(layer[theme11btn_right].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
        set(layer[theme11btn_left].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
      );

      if (device.desktop,
        set(layer[theme11btn_down].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
        set(layer[theme11btn_up].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
      );

      if (device.desktop,
        set(layer[theme11btn_out].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
        set(layer[theme11btn_in].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
      );

    if (scene.count GT 1,
        set(layer[theme11btn_next_pano].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
        set(layer[theme11btn_prev_pano].x, get(theme11button_pos));
        inc(theme11button_pos, 45);
      );

      dec(theme11button_pos, 5);

      set(theme11backgroundwidthwhenopened, get(theme11button_pos));
      set(layer[theme11_menu_bg].width, get(theme11backgroundwidthwhenopened));
	
	
	
    </action>

	<events name="theme11StartTourEvents" onTourStart="theme11CallOnStartTour();" keep="true" />
	
	<action name="theme11CallOnStartTour">
		
		showTourControls();
	</action>

  <!-- ************* -->
  <!-- Panorama Menu -->
  <!-- ************* -->

<ptplugin name="panoramaMenu" engine="kolorMenu">
	<settings>
		<option name="position" value="topleft" type="string" />
		<option name="orientation" value="horizontal" type="string" />
		<option name="sub_orientation" value="vertical" type="string" />
		<option name="margin_x" value="10" type="int" />
		<option name="margin_y" value="10" type="int" />
		<option name="background_color" value="b7ae9e" type="string" />
		<option name="background_alpha" value="1" type="float" />
		<option name="item_spacer" value="5" type="int" />
		<option name="border_radius" value="7" type="int" />
		<option name="full_size" value="false" type="bool" />
		
		<option name="use_out_effect" value="true" type="bool" />
		<option name="item_out_border_radius" value="7" type="int" />
		<option name="item_out_bg_color" value="b7ae9e" type="string" />
		<option name="item_out_bg_alpha" value="1" type="float" />
		<option name="item_out_font_color" value="ffffff" type="string" />
		<option name="item_out_font_family" value="Arial" type="string" />
		<option name="item_out_font_size" value="14" type="int" />
		<option name="item_out_font_weight" value="normal" type="string" />
		<option name="item_out_font_style" value="normal" type="string" />
		<option name="item_out_font_decoration" value="normal" type="string" />
		
		<option name="use_hover_effect" value="true" type="bool" />
		<option name="item_hover_border_radius" value="7" type="int" />
		<option name="item_hover_bg_color" value="dcd1be" type="string" />
		<option name="item_hover_bg_alpha" value="1" type="float" />
		<option name="item_hover_font_color" value="ffffff" type="string" />
		<option name="item_hover_font_family" value="Arial" type="string" />
		<option name="item_hover_font_size" value="14" type="int" />
		<option name="item_hover_font_weight" value="normal" type="string" />
		<option name="item_hover_font_style" value="normal" type="string" />
		<option name="item_hover_font_decoration" value="normal" type="string" />
		
		<option name="text_align_left" value="false" type="bool" />
		<option name="item_thumb_max_width" value="160" type="int" />
		<option name="item_thumb_max_height" value="80" type="int" />
		<option name="zorder" value="4" type="int" />
	</settings>
	<internaldata>
				<group name="group_1"
						titleID="panogroup21_title"
						thumbnail=""
						subMenu="false"
						cssClass="panogroup21"> 

				
				
						<item name="group_1_item_1"
							action="invokeKrFunction('mainloadscene', 'pano20')"
								titleID="pano20_title"
								thumbnail=""
							cssClass="pano20">
						
						
						</item>
					
				
				</group>
				<group name="group_2"
						titleID="panogroup28_title"
						thumbnail=""
						subMenu="false"
						cssClass="panogroup28"> 

				
				
						<item name="group_2_item_1"
							action="invokeKrFunction('mainloadscene', 'pano27')"
								titleID="pano27_title"
								thumbnail=""
							cssClass="pano27">
						
						
						</item>
					
				
				</group>
	</internaldata>
</ptplugin>

<action name="showKolorMenu-panoramaMenu">
	
	js(openKolorMenu(panoramaMenu));
</action>

<action name="hideKolorMenu-panoramaMenu">
	js(invokePluginFunction(panoramaMenu, hideKolorMenu));
</action>


<events name="kolorMenuEvents-panoramaMenu" 
	keep="true"
	
	
	onTourStart="showKolorMenu-panoramaMenu();"
/>
  <!-- ******* -->
  <!-- Compass -->
  <!-- ******* -->


  <layer name="compassbackground"
         url="%FIRSTXML%/graphics/compass/compassbg53a0d7.png"
         keep="true"
         handcursor="false"
         capture="false"
         align="topright"
         x="0"
         y="0"
         zorder="5"
         visible="false"

         height="100"
         width="100"

         >


    <layer name="compasspointer"
           url="%FIRSTXML%/graphics/compass/compasspointerb17135.png"
           keep="true"
           align="center"
           handcursor="false"
           capture="false"
           zorder="1"
           height="100%"
           width="100%"

          />
  </layer>

  <events name="compassevts"
          keep="true"
          onnewpano="compassUpdateOrientation();"
          onviewchanged="compassUpdateOrientation();"
    onTourStart="showcompass();"
          hidetourcontrols="hidecompass();"
          showtourcontrols="showcompass();"
         />

  <action name="compassUpdateOrientation">
	mod(compasshlookat, view.hlookat, 360);
    mul(compassheading, -1, get(scene[get(xml.scene)].heading));
    if (compassheading == null, set(compassheading, 0));
	sub(layer[compasspointer].rotate, compasshlookat, compassheading);
  </action>

 
  <action name="hidecompass">
    set(layer[compassbackground].visible, false);
  </action>
  <action name="showcompass">
    set(layer[compassbackground].visible, true);
  </action>

	
	<!-- ************ -->
	<!-- PanotourMaps -->
	<!-- ************ -->
	
		<ptplugin name="panotourmaps" lat="-9999" lng="-9999" zoom="11" maptypelayer="hybrid" position="left" size="30" resizable="true" multimap="false" openatstart="false" state="false" bgcolor="b7ae9e" zorder="6" engine="KolorMap">
	
		<radar visible="true" radius="8000" linktozoom="true" quality="8" linecolor="b7ae9e" lineopacity="0.500007629510948" linewidth="1" fillcolor="b7ae9e" fillopacity="0.300007629510948" />
		
		
		<controls zoom="true" pan="true" scale="true" maptype="true" overview="false">
			<ui draggable="true" scrollable="true" dblclick="true" />
		</controls>
		
		<markerSelected name="" heading="" fov="" />
		
		
		
			<!-- PanotourMaps markers counter : 1 -->
				<marker name="spotmap26" lat="30.0060386658" lng="31.2301826477" heading="0" draggable="false" desc="spotmap26_tooltip" desctype="info" onhover="true" isscene="true" scene="pano20" jsclick="spotmap26ActionSpotMap">
					<markericon url="spots/pin_curved_2d_shadowed_user_defaultmap1.png" iconwidth="32" iconheight="32" shadow="false" iconanchor="center" />
				</marker>
		
		
		
	</ptplugin>
	
	<action name="kolorMapJsReady-panotourmaps">
		set(ptplugin[panotourmaps].jsready, true);
	</action>
	
	
	
		<!-- PanotourMaps markers counter : 1 -->
				<action name="spotmap26ActionSpotMap">
          if (xml.scene != pano20,
            mainloadscene(pano20);
          );
      lookat(get(panoview.h), get(panoview.v), get(panoview.fov));
    </action>
	
	
	
	
	
	<!-- Begin PanotourMaps events and actions -->
	<events name="panotourmapsEvents" 
	onxmlcomplete="ifnot(panotourmapsMapLoaded,set(tour_displaymap,false););" 
	onnewpano="panotourmapsActivateDefaultMarker();" 
	onremovepano="panotourmapsUnselectMarker();" 
	onviewchanged="panotourmapsOnviewchange()" 
	onhidetourmap="panotourmapsClosetourmap();" 
	onshowtourmap="if(tour_displaymap,panotourmapsOpentourmap(););" 
	hidetourcontrols="panotourmapsClosetourmap();" 
	showtourcontrols="if(tour_displaymap,panotourmapsOpentourmap(););" 
	onenterfullscreen="panotourmapsUpdateMaxMapSize();" 
	onexitfullscreen="panotourmapsUpdateMaxMapSize();" 
	keep="true" />
	
	
	<krpano panotourmapsMarkerDefaultSet="false" />
	<krpano panotourmapsMapLoaded="false" />
	
	
	<action name="panotourmapsUpdateMaxMapSize">
		js(invokePluginFunction(panotourmaps, updateResizableMapMaxSize));
	</action>
	
	<action name="kolorMapJsReadyLoop-panotourmaps">
		if(ptplugin[panotourmaps].jsready,
			stopdelayedcall(jsReadyLoopId-panotourmaps);
			if(%1 == "close",
				panotourmapsClosetourmap();
			,
				panotourmapsOpentourmap();
			);
		,
			delayedcall(jsReadyLoopId-panotourmaps, 0.2, kolorMapJsReadyLoop-panotourmaps(%1));
		);
	</action>
	
	<action name="panotourmapsClosetourmap">
		if(ptplugin[panotourmaps].jsready,
			set(ptplugin[panotourmaps].state, false);
			js(invokePluginFunction(panotourmaps, openCloseMap, close));
		,
			kolorMapJsReadyLoop-panotourmaps(close);
		);
	</action>
	
	
	<action name="panotourmapsOpentourmap">
		if(ptplugin[panotourmaps].jsready,
			set(ptplugin[panotourmaps].state, true);
			js(invokePluginFunction(panotourmaps, openCloseMap, open));
		,
			kolorMapJsReadyLoop-panotourmaps(open);
		);
	</action>
	
	
	<action name="panotourmapsChangescene">
		if(xml.scene != '%1',mainloadscene(%1);panotourmapsGoMarker(%2));
	</action>
	
	<action name="panotourmapsOnviewchange">
		if ( panotourmapsMapLoaded == true,
			ifnot(ptplugin[panotourmaps].markerSelected.name == "",
				js(invokePluginFunction(panotourmaps, changeDirection, get(view.hlookat), get(view.fov)));
			);
		);
	</action>
	
	<action name="panotourmapsGoMarker">
		if ( panotourmapsMapLoaded == true,
			
			set(ptplugin[panotourmaps].markerSelected.name, %1);
			set(ptplugin[panotourmaps].markerSelected.heading, get(view.hlookat));
			set(ptplugin[panotourmaps].markerSelected.fov, get(view.fov));
			js(invokePluginFunction(panotourmaps, changeCurrentMarker, %1, get(view.hlookat), get(view.fov)));
			
			if( panotourmapsMarkerDefaultSet == false,
				js(setMapDefaultMarker(panotourmaps, %1, get(view.hlookat), get(view.fov)));
				set(panotourmapsMarkerDefaultSet,true);
			);
		);
	</action>
	
	<action name="panotourmapsUnselectMarker">
		set(ptplugin[panotourmaps].markerSelected.name, "");
		js(invokePluginFunction(panotourmaps, unselectCurrentMarker));
		
		js(setMapDefaultMarker(panotourmaps, null, null, null));
	</action>
	
	<action name="panotourmapsActivateDefaultMarker">
		set(panotourmapsMapLoaded, true);
		
		set(panotourmapsMapSpotFound, false);
		set(defaultmarkerinc-wait,50);
		for(set(defaultmarkerinc,0), defaultmarkerinc LT ptplugin[panotourmaps].marker.count , inc(defaultmarkerinc),
			if(defaultmarkerinc-wait == defaultmarkerinc,
				add(defaultmarkerinc-wait,50);
				wait(0);
			);
			if(ptplugin[panotourmaps].marker[get(defaultmarkerinc)].isscene == true,
				if(panotourmapsMapSpotFound == false,
					if(ptplugin[panotourmaps].marker[get(defaultmarkerinc)].scene == xml.scene,
						ifnot(ptplugin[panotourmaps].marker[get(defaultmarkerinc)].name == ptplugin[panotourmaps].markerSelected.name,
							panotourmapsGoMarker(get(ptplugin[panotourmaps].marker[get(defaultmarkerinc)].name));
						);
						set(panotourmapsMapSpotFound, true);
					);
				);
			);
		);
		
		if(panotourmapsMapSpotFound == false,
			panotourmapsUnselectMarker();
		);
	</action>
	
  <!-- Hide / Show Controls -->
  <action name="hideTourControls">set(tour_displaycontrols, false);events.dispatch(hidetourcontrols);</action>
  <action name="showTourControls">set(tour_displaycontrols, true); events.dispatch(showtourcontrols);</action>
  <!-- Hide / Show Thumbnails -->
  <action name="hideTourThumbnails">set(tour_displaythumbnails, false);events.dispatch(hidetourthumbnails);</action>
  <action name="showTourThumbnails">set(tour_displaythumbnails, true); events.dispatch(showtourthumbnails);</action>
  <!-- Fullscreen Management -->
  <action name="exitFullScreen" devices="fullscreensupport">set(tour_fullscreen,false);js(setFullscreen(false));</action>
  <action name="enterFullScreen" devices="fullscreensupport">set(tour_fullscreen,true);js(setFullscreen(true));</action>
  <action name="switchFullScreen">if(tour_fullscreen,exitFullScreen();,enterFullScreen(););</action>

  
  <events name="krpanoExitFullscreenEvent"
    onexitfullscreen="if(tour_fullscreen,exitFullScreenChangeEvent(););"
    keep="true" />

  <action name="exitFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,false);events.dispatch(onexitfullscreen);</action>
  <action name="enterFullScreenChangeEvent" devices="fullscreensupport">set(tour_fullscreen,true);events.dispatch(onenterfullscreen);</action>
  <action name="exitFullScreenFallback">set(fullscreen,false);</action>
  <action name="enterFullScreenFallback">set(fullscreen,true);</action>
  
  <action name="resizeFullScreenEvent">delayedcall(0,updatescreen(););</action>
  <action name="enableGyroscope">
    changeGyroscopeState();
  </action>
  <action name="disableGyroscope">
    changeGyroscopeState();
  </action>
  <!-- Tour Information -->
  <action name="hideTourInfo">set(tour_displayinfo, false);events.dispatch(onhidetourinfo);</action>
  <action name="showTourInfo">set(tour_displayinfo, true); events.dispatch(onshowtourinfo);</action><action name="setViewArchitectural">
	stopSetViewTweens();
	setViewArchitecturalComplete();
</action>

<action name="setViewArchitecturalComplete">
	tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00), easeoutquad);
	tween(view.architectural, 1.0, distance(1.0, 0.45), easeoutquad, 
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad, 
			set(view.fisheyefovlink, 0.5);
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			tween(view.vlookat, get(panoview.v), 1.25);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action><action name="setViewLittlePlanet">
	stopSetViewTweens();
	setViewLittlePlanetComplete();
</action>

<action name="setViewLittlePlanetComplete">
	tween(view.architectural, 0.0, 0.25, easeoutquad, 
		tween(view.vlookat, 90, distance(179, 1.50), easeoutquad);
		set(backtonormalfirst,false);
		if(view.pannini == true, set(backtonormalfirst,true) );
		if(view.stereographic == false, set(backtonormalfirst,true) );
		if(backtonormalfirst, tween(view.fisheye, 0.0 ,distance(1.0, 0.25), easeoutquad, WAIT); );
		if(view.pannini, set(view.pannini,false); delayedcall(0, updateobject(true,true)); );
		if(panoview.fovmax LE 150, set(view.fovmax, 150); , set(view.fovmax, get(panoview.fovmax)); );
		set(view.stereographic, true);
		set(view.fisheyefovlink, 1.5);
		tween(view.fisheye, 1.0, distance(1.0, 0.75), easeoutquad);
		tween(view.fov, 150, distance(179, 0.75), easeoutquad);
	);
</action>
  <!-- MAP -->
  <action name="hideMap">set(tour_displaymap, false);events.dispatch(onhidetourmap);</action>
  <action name="showMap">set(tour_displaymap, true); events.dispatch(onshowtourmap);</action><action name="setViewNormal">
	stopSetViewTweens();
	setViewNormalComplete();
</action>

<action name="setViewNormalComplete">
	tween(view.architectural, 0.0, distance(1.0, 0.45), easeoutquad,
		tween(view.fovmax, get(panoview.fovmax), distance(179, 1.00));
		tween(view.vlookat, get(panoview.v), distance(90, 0.45));
		tween(view.fisheye, 0.0, distance(1.0, 0.45), easeoutquad,
			set(view.stereographic,false);
			if(view.pannini, set(view.pannini,false); delayedcall(0,updateobject(true,true)); );
			set(view.fisheyefovlink, 0.5);
			if(panoview.fov LE view.fov, tween(view.fov, get(panoview.fov), distance(50, 0.45)); );
		);
	);
</action>

<action name="stopSetViewTweens">
	stoptween(view.fov);
	stoptween(view.fovmax);
	stoptween(view.vlookat);
	stoptween(view.fisheye);
	stoptween(view.architectural);
</action>
</krpano>